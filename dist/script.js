"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var educationUrl = "https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json";
var geoUrl = "https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json";
document.addEventListener("DOMContentLoaded", function () {
  Promise.all([d3.json(educationUrl), d3.json(geoUrl)]).then(setData);
});
var h = 600,
    w = 960;
d3.select('.container').append('svg').attr('width', w).attr('height', h);
/**
 * Api Education object from FCC
 * @typedef {Object} Education
 * @property {String} area_name         - County Name
 * @property {Number} bachelorsOrHigher - Percentage of adults age 25 and older with a bachelor's degree or higher
 * @property {Number} fips              - county Id
 * @property {String} state             - State code (two letter)
 */

/**
 *
 * @param {[Education]} educationData
 * @param {UsAtlas} topology
 */

function setData(_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      educationData = _ref2[0],
      topology = _ref2[1];

  var path = d3.geoPath();
  /**
   *
   * @type {Map<String,Education>}
   * @property {Number} min
   * @property {Number} max
   */

  var map = educationData.reduce(function (acc, x) {
    acc[x.fips] = x;
    acc["min"] = Math.min(x.bachelorsOrHigher, acc["min"]);
    acc["max"] = Math.max(x.bachelorsOrHigher, acc["max"]);
    return acc;
  }, {
    min: 100,
    max: 0
  });
  var counties = topojson.feature(topology, topology.objects.counties); // const states = topojson.feature(topology, topology.objects.states);

  var colors = d3.schemeGreens[8];
  var colorScale = d3.scaleThreshold().domain(d3.range(map.min, map.max, 9)).range(colors);
  var tooltip = d3.select('#tooltip');
  d3.select('svg').call(function (svg) {
    svg.selectAll('path').data(counties.features).enter().append('path').attr("d", path).attr('data-fips', function (d) {
      return d.id;
    }).attr('data-education', function (d) {
      return map[d.id].bachelorsOrHigher;
    }).attr('class', "county").style('fill', function (d) {
      return colorScale(map[d.id].bachelorsOrHigher);
    }).on('mouseover', function (county) {
      /**
       * @type {Education}
       */
      var d = map[county.id];
      var _d3$event = d3.event,
          x = _d3$event.pageX,
          y = _d3$event.pageY;
      tooltip.style("display", "inline-block");
      tooltip.style("left", "".concat(x, "px"));
      tooltip.html("".concat(d.area_name, ", ").concat(d.state, ": ").concat(d.bachelorsOrHigher, "%"));
      tooltip.style("top", "".concat(y, "px"));
      tooltip.attr('data-education', d.bachelorsOrHigher);
    }).on('mouseout', function () {
      tooltip.style("display", "none");
    }); //
    // svg.selectAll('path2')
    //     .data(states.features)
    //     .enter()
    //     .append('path')
    //     .attr("d", path)
    //     .attr('class', "state");

    svg.append("path").attr("class", "state").attr("d", path(topojson.mesh(topology, topology.objects.states, function (a, b) {
      return a !== b;
    })));
    svg.append('g').attr("id", "legend").attr('transform', "translate(".concat(600, ",", 30, ")")).call(function (g) {
      var width = 250;
      var height = 10;
      var min = map.min;
      var max = map.max;
      var step = (max - min) / colors.length;
      var range = d3.range(min, max, step).map(function (x) {
        return x;
      });
      console.log(range);
      var legendScale = d3.scaleLinear().domain([min, max]).range([0, width]);
      var values = range;
      var axis = d3.axisBottom(legendScale).tickSizeOuter(0).tickFormat(d3.format(".1f")).tickValues(range.slice(1));
      g.selectAll('rect').data(values).enter().append('rect').style('fill', function (d) {
        return colorScale(d + 0.1);
      }).attr('width', function (x, i) {
        return (legendScale(range[i + 1]) || width) - legendScale(x);
      }).attr('height', height).attr('x', function (x) {
        return legendScale(x);
      }).attr('y', 0);
      g.append('g').attr("transform", "translate(-0.5,".concat(height, ")")).call(axis);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJlZHVjYXRpb25VcmwiLCJnZW9VcmwiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJQcm9taXNlIiwiYWxsIiwiZDMiLCJqc29uIiwidGhlbiIsInNldERhdGEiLCJoIiwidyIsInNlbGVjdCIsImFwcGVuZCIsImF0dHIiLCJlZHVjYXRpb25EYXRhIiwidG9wb2xvZ3kiLCJwYXRoIiwiZ2VvUGF0aCIsIm1hcCIsInJlZHVjZSIsImFjYyIsIngiLCJmaXBzIiwiTWF0aCIsIm1pbiIsImJhY2hlbG9yc09ySGlnaGVyIiwibWF4IiwiY291bnRpZXMiLCJ0b3BvanNvbiIsImZlYXR1cmUiLCJvYmplY3RzIiwiY29sb3JzIiwic2NoZW1lR3JlZW5zIiwiY29sb3JTY2FsZSIsInNjYWxlVGhyZXNob2xkIiwiZG9tYWluIiwicmFuZ2UiLCJ0b29sdGlwIiwiY2FsbCIsInN2ZyIsInNlbGVjdEFsbCIsImRhdGEiLCJmZWF0dXJlcyIsImVudGVyIiwiZCIsImlkIiwic3R5bGUiLCJvbiIsImNvdW50eSIsImV2ZW50IiwicGFnZVgiLCJ5IiwicGFnZVkiLCJodG1sIiwiYXJlYV9uYW1lIiwic3RhdGUiLCJtZXNoIiwic3RhdGVzIiwiYSIsImIiLCJnIiwid2lkdGgiLCJoZWlnaHQiLCJzdGVwIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsImxlZ2VuZFNjYWxlIiwic2NhbGVMaW5lYXIiLCJ2YWx1ZXMiLCJheGlzIiwiYXhpc0JvdHRvbSIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrRm9ybWF0IiwiZm9ybWF0IiwidGlja1ZhbHVlcyIsInNsaWNlIiwiaSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUlBLElBQU1BLFlBQVksR0FBRyxnR0FBckI7QUFDQSxJQUFNQyxNQUFNLEdBQUcsc0ZBQWY7QUFFQUMsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBWTtBQUN0REMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksQ0FBQ0MsRUFBRSxDQUFDQyxJQUFILENBQVFQLFlBQVIsQ0FBRCxFQUF3Qk0sRUFBRSxDQUFDQyxJQUFILENBQVFOLE1BQVIsQ0FBeEIsQ0FBWixFQUFzRE8sSUFBdEQsQ0FBMkRDLE9BQTNEO0FBQ0gsQ0FGRDtBQUtBLElBQU1DLENBQUMsR0FBRyxHQUFWO0FBQUEsSUFBZUMsQ0FBQyxHQUFHLEdBQW5CO0FBRUFMLEVBQUUsQ0FBQ00sTUFBSCxDQUFVLFlBQVYsRUFDS0MsTUFETCxDQUNZLEtBRFosRUFFS0MsSUFGTCxDQUVVLE9BRlYsRUFFbUJILENBRm5CLEVBR0tHLElBSEwsQ0FHVSxRQUhWLEVBR29CSixDQUhwQjtBQUtBOzs7Ozs7Ozs7QUFVQTs7Ozs7O0FBS0EsU0FBU0QsT0FBVCxPQUE0QztBQUFBO0FBQUEsTUFBMUJNLGFBQTBCO0FBQUEsTUFBWEMsUUFBVzs7QUFFeEMsTUFBTUMsSUFBSSxHQUFHWCxFQUFFLENBQUNZLE9BQUgsRUFBYjtBQUVBOzs7Ozs7O0FBTUEsTUFBTUMsR0FBRyxHQUFHSixhQUFhLENBQUNLLE1BQWQsQ0FBcUIsVUFBQ0MsR0FBRCxFQUFNQyxDQUFOLEVBQVk7QUFDekNELElBQUFBLEdBQUcsQ0FBQ0MsQ0FBQyxDQUFDQyxJQUFILENBQUgsR0FBY0QsQ0FBZDtBQUNBRCxJQUFBQSxHQUFHLENBQUMsS0FBRCxDQUFILEdBQWFHLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxDQUFDLENBQUNJLGlCQUFYLEVBQThCTCxHQUFHLENBQUMsS0FBRCxDQUFqQyxDQUFiO0FBQ0FBLElBQUFBLEdBQUcsQ0FBQyxLQUFELENBQUgsR0FBYUcsSUFBSSxDQUFDRyxHQUFMLENBQVNMLENBQUMsQ0FBQ0ksaUJBQVgsRUFBOEJMLEdBQUcsQ0FBQyxLQUFELENBQWpDLENBQWI7QUFDQSxXQUFPQSxHQUFQO0FBQ0gsR0FMVyxFQUtUO0FBQUNJLElBQUFBLEdBQUcsRUFBRSxHQUFOO0FBQVdFLElBQUFBLEdBQUcsRUFBRTtBQUFoQixHQUxTLENBQVo7QUFRQSxNQUFNQyxRQUFRLEdBQUdDLFFBQVEsQ0FBQ0MsT0FBVCxDQUFpQmQsUUFBakIsRUFBMkJBLFFBQVEsQ0FBQ2UsT0FBVCxDQUFpQkgsUUFBNUMsQ0FBakIsQ0FsQndDLENBbUJ4Qzs7QUFFQSxNQUFNSSxNQUFNLEdBQUcxQixFQUFFLENBQUMyQixZQUFILENBQWdCLENBQWhCLENBQWY7QUFDQSxNQUFNQyxVQUFVLEdBQUc1QixFQUFFLENBQUM2QixjQUFILEdBQW9CQyxNQUFwQixDQUEyQjlCLEVBQUUsQ0FBQytCLEtBQUgsQ0FBU2xCLEdBQUcsQ0FBQ00sR0FBYixFQUFrQk4sR0FBRyxDQUFDUSxHQUF0QixFQUEyQixDQUEzQixDQUEzQixFQUEwRFUsS0FBMUQsQ0FBZ0VMLE1BQWhFLENBQW5CO0FBRUEsTUFBTU0sT0FBTyxHQUFHaEMsRUFBRSxDQUFDTSxNQUFILENBQVUsVUFBVixDQUFoQjtBQUVBTixFQUFBQSxFQUFFLENBQUNNLE1BQUgsQ0FBVSxLQUFWLEVBQWlCMkIsSUFBakIsQ0FBc0IsVUFBQUMsR0FBRyxFQUFJO0FBR3pCQSxJQUFBQSxHQUFHLENBQUNDLFNBQUosQ0FBYyxNQUFkLEVBQ0tDLElBREwsQ0FDVWQsUUFBUSxDQUFDZSxRQURuQixFQUVLQyxLQUZMLEdBR0svQixNQUhMLENBR1ksTUFIWixFQUlLQyxJQUpMLENBSVUsR0FKVixFQUllRyxJQUpmLEVBS0tILElBTEwsQ0FLVSxXQUxWLEVBS3VCLFVBQUErQixDQUFDO0FBQUEsYUFBSUEsQ0FBQyxDQUFDQyxFQUFOO0FBQUEsS0FMeEIsRUFNS2hDLElBTkwsQ0FNVSxnQkFOVixFQU00QixVQUFBK0IsQ0FBQztBQUFBLGFBQUkxQixHQUFHLENBQUMwQixDQUFDLENBQUNDLEVBQUgsQ0FBSCxDQUFVcEIsaUJBQWQ7QUFBQSxLQU43QixFQU9LWixJQVBMLENBT1UsT0FQVixFQU9tQixRQVBuQixFQVFLaUMsS0FSTCxDQVFXLE1BUlgsRUFRbUIsVUFBQUYsQ0FBQztBQUFBLGFBQUlYLFVBQVUsQ0FBQ2YsR0FBRyxDQUFDMEIsQ0FBQyxDQUFDQyxFQUFILENBQUgsQ0FBVXBCLGlCQUFYLENBQWQ7QUFBQSxLQVJwQixFQVNLc0IsRUFUTCxDQVNRLFdBVFIsRUFTcUIsVUFBQ0MsTUFBRCxFQUFZO0FBRXpCOzs7QUFHQSxVQUFNSixDQUFDLEdBQUcxQixHQUFHLENBQUM4QixNQUFNLENBQUNILEVBQVIsQ0FBYjtBQUx5QixzQkFNSXhDLEVBQUUsQ0FBQzRDLEtBTlA7QUFBQSxVQU1YNUIsQ0FOVyxhQU1sQjZCLEtBTmtCO0FBQUEsVUFNREMsQ0FOQyxhQU1SQyxLQU5RO0FBT3pCZixNQUFBQSxPQUFPLENBQUNTLEtBQVIsQ0FBYyxTQUFkLEVBQXlCLGNBQXpCO0FBQ0FULE1BQUFBLE9BQU8sQ0FBQ1MsS0FBUixDQUFjLE1BQWQsWUFBeUJ6QixDQUF6QjtBQUNBZ0IsTUFBQUEsT0FBTyxDQUFDZ0IsSUFBUixXQUFnQlQsQ0FBQyxDQUFDVSxTQUFsQixlQUFnQ1YsQ0FBQyxDQUFDVyxLQUFsQyxlQUE0Q1gsQ0FBQyxDQUFDbkIsaUJBQTlDO0FBQ0FZLE1BQUFBLE9BQU8sQ0FBQ1MsS0FBUixDQUFjLEtBQWQsWUFBd0JLLENBQXhCO0FBQ0FkLE1BQUFBLE9BQU8sQ0FBQ3hCLElBQVIsQ0FBYSxnQkFBYixFQUErQitCLENBQUMsQ0FBQ25CLGlCQUFqQztBQUNILEtBckJMLEVBc0JLc0IsRUF0QkwsQ0FzQlEsVUF0QlIsRUFzQm9CLFlBQU07QUFDbEJWLE1BQUFBLE9BQU8sQ0FBQ1MsS0FBUixDQUFjLFNBQWQsRUFBeUIsTUFBekI7QUFDSCxLQXhCTCxFQUh5QixDQTRCekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFQLElBQUFBLEdBQUcsQ0FBQzNCLE1BQUosQ0FBVyxNQUFYLEVBQ0tDLElBREwsQ0FDVSxPQURWLEVBQ21CLE9BRG5CLEVBRUtBLElBRkwsQ0FFVSxHQUZWLEVBRWVHLElBQUksQ0FBQ1ksUUFBUSxDQUFDNEIsSUFBVCxDQUFjekMsUUFBZCxFQUF3QkEsUUFBUSxDQUFDZSxPQUFULENBQWlCMkIsTUFBekMsRUFBaUQsVUFBU0MsQ0FBVCxFQUFZQyxDQUFaLEVBQWU7QUFBRSxhQUFPRCxDQUFDLEtBQUtDLENBQWI7QUFBaUIsS0FBbkYsQ0FBRCxDQUZuQjtBQUtBcEIsSUFBQUEsR0FBRyxDQUFDM0IsTUFBSixDQUFXLEdBQVgsRUFDS0MsSUFETCxDQUNVLElBRFYsRUFDZ0IsUUFEaEIsRUFFS0EsSUFGTCxDQUVVLFdBRlYsc0JBRW9DLEdBRnBDLE9BRTJDLEVBRjNDLFFBR0t5QixJQUhMLENBR1UsVUFBQ3NCLENBQUQsRUFBTztBQUNULFVBQU1DLEtBQUssR0FBRyxHQUFkO0FBQ0EsVUFBTUMsTUFBTSxHQUFHLEVBQWY7QUFDQSxVQUFNdEMsR0FBRyxHQUFHTixHQUFHLENBQUNNLEdBQWhCO0FBQ0EsVUFBTUUsR0FBRyxHQUFHUixHQUFHLENBQUNRLEdBQWhCO0FBQ0EsVUFBTXFDLElBQUksR0FBRyxDQUFDckMsR0FBRyxHQUFHRixHQUFQLElBQWNPLE1BQU0sQ0FBQ2lDLE1BQWxDO0FBRUEsVUFBTTVCLEtBQUssR0FBRy9CLEVBQUUsQ0FBQytCLEtBQUgsQ0FBU1osR0FBVCxFQUFjRSxHQUFkLEVBQW1CcUMsSUFBbkIsRUFBeUI3QyxHQUF6QixDQUE2QixVQUFBRyxDQUFDO0FBQUEsZUFBSUEsQ0FBSjtBQUFBLE9BQTlCLENBQWQ7QUFDQTRDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZOUIsS0FBWjtBQUdBLFVBQU0rQixXQUFXLEdBQUc5RCxFQUFFLENBQUMrRCxXQUFILEdBQ2ZqQyxNQURlLENBQ1IsQ0FBQ1gsR0FBRCxFQUFNRSxHQUFOLENBRFEsRUFFZlUsS0FGZSxDQUVULENBQUMsQ0FBRCxFQUFJeUIsS0FBSixDQUZTLENBQXBCO0FBSUEsVUFBTVEsTUFBTSxHQUFHakMsS0FBZjtBQUNBLFVBQU1rQyxJQUFJLEdBQUdqRSxFQUFFLENBQUNrRSxVQUFILENBQWNKLFdBQWQsRUFDUkssYUFEUSxDQUNNLENBRE4sRUFFUkMsVUFGUSxDQUVHcEUsRUFBRSxDQUFDcUUsTUFBSCxDQUFVLEtBQVYsQ0FGSCxFQUdSQyxVQUhRLENBR0d2QyxLQUFLLENBQUN3QyxLQUFOLENBQVksQ0FBWixDQUhILENBQWI7QUFLQWhCLE1BQUFBLENBQUMsQ0FBQ3BCLFNBQUYsQ0FBWSxNQUFaLEVBQ0tDLElBREwsQ0FDVTRCLE1BRFYsRUFFSzFCLEtBRkwsR0FHSy9CLE1BSEwsQ0FHWSxNQUhaLEVBSUtrQyxLQUpMLENBSVcsTUFKWCxFQUltQixVQUFBRixDQUFDO0FBQUEsZUFBSVgsVUFBVSxDQUFDVyxDQUFDLEdBQUcsR0FBTCxDQUFkO0FBQUEsT0FKcEIsRUFLSy9CLElBTEwsQ0FLVSxPQUxWLEVBS21CLFVBQUNRLENBQUQsRUFBSXdELENBQUo7QUFBQSxlQUFVLENBQUNWLFdBQVcsQ0FBQy9CLEtBQUssQ0FBQ3lDLENBQUMsR0FBRyxDQUFMLENBQU4sQ0FBWCxJQUE2QmhCLEtBQTlCLElBQXVDTSxXQUFXLENBQUM5QyxDQUFELENBQTVEO0FBQUEsT0FMbkIsRUFNS1IsSUFOTCxDQU1VLFFBTlYsRUFNb0JpRCxNQU5wQixFQU9LakQsSUFQTCxDQU9VLEdBUFYsRUFPZSxVQUFBUSxDQUFDO0FBQUEsZUFBSThDLFdBQVcsQ0FBQzlDLENBQUQsQ0FBZjtBQUFBLE9BUGhCLEVBUUtSLElBUkwsQ0FRVSxHQVJWLEVBUWUsQ0FSZjtBQVVBK0MsTUFBQUEsQ0FBQyxDQUFDaEQsTUFBRixDQUFTLEdBQVQsRUFDS0MsSUFETCxDQUNVLFdBRFYsMkJBQ3lDaUQsTUFEekMsUUFFS3hCLElBRkwsQ0FFVWdDLElBRlY7QUFHSCxLQXJDTDtBQXVDSCxHQWhGRDtBQW1GSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGQzIGZyb20gXCJAdHlwZXMvZDNcIjtcbmltcG9ydCAqIGFzIHRvcG9qc29uIGZyb20gXCJAdHlwZXMvdG9wb2pzb25cIjtcblxuXG5jb25zdCBlZHVjYXRpb25VcmwgPSBcImh0dHBzOi8vY2RuLmZyZWVjb2RlY2FtcC5vcmcvdGVzdGFibGUtcHJvamVjdHMtZmNjL2RhdGEvY2hvcm9wbGV0aF9tYXAvZm9yX3VzZXJfZWR1Y2F0aW9uLmpzb25cIjtcbmNvbnN0IGdlb1VybCA9IFwiaHR0cHM6Ly9jZG4uZnJlZWNvZGVjYW1wLm9yZy90ZXN0YWJsZS1wcm9qZWN0cy1mY2MvZGF0YS9jaG9yb3BsZXRoX21hcC9jb3VudGllcy5qc29uXCI7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBQcm9taXNlLmFsbChbZDMuanNvbihlZHVjYXRpb25VcmwpLCBkMy5qc29uKGdlb1VybCldKS50aGVuKHNldERhdGEpXG59KTtcblxuXG5jb25zdCBoID0gNjAwLCB3ID0gOTYwO1xuXG5kMy5zZWxlY3QoJy5jb250YWluZXInKVxuICAgIC5hcHBlbmQoJ3N2ZycpXG4gICAgLmF0dHIoJ3dpZHRoJywgdylcbiAgICAuYXR0cignaGVpZ2h0JywgaCk7XG5cbi8qKlxuICogQXBpIEVkdWNhdGlvbiBvYmplY3QgZnJvbSBGQ0NcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEVkdWNhdGlvblxuICogQHByb3BlcnR5IHtTdHJpbmd9IGFyZWFfbmFtZSAgICAgICAgIC0gQ291bnR5IE5hbWVcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBiYWNoZWxvcnNPckhpZ2hlciAtIFBlcmNlbnRhZ2Ugb2YgYWR1bHRzIGFnZSAyNSBhbmQgb2xkZXIgd2l0aCBhIGJhY2hlbG9yJ3MgZGVncmVlIG9yIGhpZ2hlclxuICogQHByb3BlcnR5IHtOdW1iZXJ9IGZpcHMgICAgICAgICAgICAgIC0gY291bnR5IElkXG4gKiBAcHJvcGVydHkge1N0cmluZ30gc3RhdGUgICAgICAgICAgICAgLSBTdGF0ZSBjb2RlICh0d28gbGV0dGVyKVxuICovXG5cblxuLyoqXG4gKlxuICogQHBhcmFtIHtbRWR1Y2F0aW9uXX0gZWR1Y2F0aW9uRGF0YVxuICogQHBhcmFtIHtVc0F0bGFzfSB0b3BvbG9neVxuICovXG5mdW5jdGlvbiBzZXREYXRhKFtlZHVjYXRpb25EYXRhLCB0b3BvbG9neV0pIHtcblxuICAgIGNvbnN0IHBhdGggPSBkMy5nZW9QYXRoKCk7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEB0eXBlIHtNYXA8U3RyaW5nLEVkdWNhdGlvbj59XG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IG1pblxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBtYXhcbiAgICAgKi9cbiAgICBjb25zdCBtYXAgPSBlZHVjYXRpb25EYXRhLnJlZHVjZSgoYWNjLCB4KSA9PiB7XG4gICAgICAgIGFjY1t4LmZpcHNdID0geDtcbiAgICAgICAgYWNjW1wibWluXCJdID0gTWF0aC5taW4oeC5iYWNoZWxvcnNPckhpZ2hlciwgYWNjW1wibWluXCJdKTtcbiAgICAgICAgYWNjW1wibWF4XCJdID0gTWF0aC5tYXgoeC5iYWNoZWxvcnNPckhpZ2hlciwgYWNjW1wibWF4XCJdKTtcbiAgICAgICAgcmV0dXJuIGFjY1xuICAgIH0sIHttaW46IDEwMCwgbWF4OiAwfSk7XG5cblxuICAgIGNvbnN0IGNvdW50aWVzID0gdG9wb2pzb24uZmVhdHVyZSh0b3BvbG9neSwgdG9wb2xvZ3kub2JqZWN0cy5jb3VudGllcyk7XG4gICAgLy8gY29uc3Qgc3RhdGVzID0gdG9wb2pzb24uZmVhdHVyZSh0b3BvbG9neSwgdG9wb2xvZ3kub2JqZWN0cy5zdGF0ZXMpO1xuXG4gICAgY29uc3QgY29sb3JzID0gZDMuc2NoZW1lR3JlZW5zWzhdO1xuICAgIGNvbnN0IGNvbG9yU2NhbGUgPSBkMy5zY2FsZVRocmVzaG9sZCgpLmRvbWFpbihkMy5yYW5nZShtYXAubWluLCBtYXAubWF4LCA5KSkucmFuZ2UoY29sb3JzKTtcblxuICAgIGNvbnN0IHRvb2x0aXAgPSBkMy5zZWxlY3QoJyN0b29sdGlwJyk7XG5cbiAgICBkMy5zZWxlY3QoJ3N2ZycpLmNhbGwoc3ZnID0+IHtcblxuXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgICAgICAgLmRhdGEoY291bnRpZXMuZmVhdHVyZXMpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgcGF0aClcbiAgICAgICAgICAgIC5hdHRyKCdkYXRhLWZpcHMnLCBkID0+IGQuaWQpXG4gICAgICAgICAgICAuYXR0cignZGF0YS1lZHVjYXRpb24nLCBkID0+IG1hcFtkLmlkXS5iYWNoZWxvcnNPckhpZ2hlcilcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsIFwiY291bnR5XCIpXG4gICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBkID0+IGNvbG9yU2NhbGUobWFwW2QuaWRdLmJhY2hlbG9yc09ySGlnaGVyKSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKGNvdW50eSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQHR5cGUge0VkdWNhdGlvbn1cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBkID0gbWFwW2NvdW50eS5pZF07XG4gICAgICAgICAgICAgICAgY29uc3Qge3BhZ2VYOiB4LCBwYWdlWTogeX0gPSBkMy5ldmVudDtcbiAgICAgICAgICAgICAgICB0b29sdGlwLnN0eWxlKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcbiAgICAgICAgICAgICAgICB0b29sdGlwLnN0eWxlKFwibGVmdFwiLCBgJHt4fXB4YCk7XG4gICAgICAgICAgICAgICAgdG9vbHRpcC5odG1sKGAke2QuYXJlYV9uYW1lfSwgJHtkLnN0YXRlfTogJHtkLmJhY2hlbG9yc09ySGlnaGVyfSVgKTtcbiAgICAgICAgICAgICAgICB0b29sdGlwLnN0eWxlKFwidG9wXCIsIGAke3l9cHhgKTtcbiAgICAgICAgICAgICAgICB0b29sdGlwLmF0dHIoJ2RhdGEtZWR1Y2F0aW9uJywgZC5iYWNoZWxvcnNPckhpZ2hlcik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0b29sdGlwLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gc3ZnLnNlbGVjdEFsbCgncGF0aDInKVxuICAgICAgICAvLyAgICAgLmRhdGEoc3RhdGVzLmZlYXR1cmVzKVxuICAgICAgICAvLyAgICAgLmVudGVyKClcbiAgICAgICAgLy8gICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAvLyAgICAgLmF0dHIoXCJkXCIsIHBhdGgpXG4gICAgICAgIC8vICAgICAuYXR0cignY2xhc3MnLCBcInN0YXRlXCIpO1xuXG4gICAgICAgIHN2Zy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic3RhdGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBwYXRoKHRvcG9qc29uLm1lc2godG9wb2xvZ3ksIHRvcG9sb2d5Lm9iamVjdHMuc3RhdGVzLCBmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhICE9PSBiOyB9KSkpO1xuXG5cbiAgICAgICAgc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIFwibGVnZW5kXCIpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkezYwMH0sJHszMH0pYClcbiAgICAgICAgICAgIC5jYWxsKChnKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSAyNTA7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gMTA7XG4gICAgICAgICAgICAgICAgY29uc3QgbWluID0gbWFwLm1pbjtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXggPSBtYXAubWF4O1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0ZXAgPSAobWF4IC0gbWluKSAvIGNvbG9ycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGQzLnJhbmdlKG1pbiwgbWF4LCBzdGVwKS5tYXAoeCA9PiB4KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyYW5nZSk7XG5cblxuICAgICAgICAgICAgICAgIGNvbnN0IGxlZ2VuZFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFttaW4sIG1heF0pXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZShbMCwgd2lkdGhdKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHJhbmdlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBkMy5heGlzQm90dG9tKGxlZ2VuZFNjYWxlKVxuICAgICAgICAgICAgICAgICAgICAudGlja1NpemVPdXRlcigwKVxuICAgICAgICAgICAgICAgICAgICAudGlja0Zvcm1hdChkMy5mb3JtYXQoXCIuMWZcIikpXG4gICAgICAgICAgICAgICAgICAgIC50aWNrVmFsdWVzKHJhbmdlLnNsaWNlKDEpKVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBnLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHZhbHVlcylcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gY29sb3JTY2FsZShkICsgMC4xKSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgKHgsIGkpID0+IChsZWdlbmRTY2FsZShyYW5nZVtpICsgMV0pIHx8IHdpZHRoKSAtIGxlZ2VuZFNjYWxlKHgpKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneCcsIHggPT4gbGVnZW5kU2NhbGUoeCkpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgMClcbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgZy5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKC0wLjUsJHtoZWlnaHR9KWApXG4gICAgICAgICAgICAgICAgICAgIC5jYWxsKGF4aXMpXG4gICAgICAgICAgICB9KTtcblxuICAgIH0pO1xuXG5cbn1cbiJdfQ==